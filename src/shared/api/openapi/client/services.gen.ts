// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-axios'

import type { UserLoginData, UserLoginError, UserLoginResponse, UserLogoutError, UserLogoutResponse, RefreshTokenData, RefreshTokenError, RefreshTokenResponse, GetAuthenticatedUserError, GetAuthenticatedUserResponse } from './types.gen'

export const client = createClient(createConfig())

export class AuthService {

	/**
	 * Вход пользователя в систему
	 */
	public static userLogin<ThrowOnError extends boolean = false>(options: Options<UserLoginData, ThrowOnError>) {
		return (options?.client ?? client).post<UserLoginResponse, UserLoginError, ThrowOnError>({
			...options,
			url: '/auth/login'
		})
	}

	/**
	 * Выход из аккаунта
	 */
	public static userLogout<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
		return (options?.client ?? client).post<UserLogoutResponse, UserLogoutError, ThrowOnError>({
			...options,
			url: '/auth/logout'
		})
	}

	/**
	 * Обновление токена
	 */
	public static refreshToken<ThrowOnError extends boolean = false>(options: Options<RefreshTokenData, ThrowOnError>) {
		return (options?.client ?? client).post<RefreshTokenResponse, RefreshTokenError, ThrowOnError>({
			...options,
			url: '/auth/refresh'
		})
	}

	/**
	 * Получает аунтефицированого пользователя по id
	 */
	public static getAuthenticatedUser<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
		return (options?.client ?? client).get<GetAuthenticatedUserResponse, GetAuthenticatedUserError, ThrowOnError>({
			...options,
			url: '/auth/me'
		})
	}

}